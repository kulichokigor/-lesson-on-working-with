{"version":3,"sources":["counter.js","App.js","serviceWorker.js","redux/redusers/reduser_1.js","redux/redusers/reduser_2.js","redux/rootReduser.js","index.js"],"names":["ComponentCounter","style","padding","border","width","margin","textAlign","this","props","counter","onClick","toChangeCount","React","Component","connect","state","reduser2","displatch","number","type","payload","styleCount","App","color","funcStyleCounter","toSub","toAdd","onReset","toAddNumber","bind","console","log","reduser1","dispatch","value","Boolean","window","location","hostname","match","staticCounter","action","combineReducers","store","createStore","rootReduser","applyMiddleware","next","result","getState","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.193cd4ed.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux'\r\n\r\nclass ComponentCounter extends React.Component{\r\n    render(){\r\n        return(\r\n            <div style={{padding:'20px', border:'1px solid grey', width:'520px', margin:'auto',textAlign:'center'}}>\r\n                <h1>Counter {this.props.counter}</h1>\r\n                <button onClick={()=>this.props.toChangeCount(5)}>ADD</button>\r\n                <button onClick={()=>this.props.toChangeCount(-5)}>SUB</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n        counter:state.reduser2.counter\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(displatch){\r\n    return{\r\n        toChangeCount: (number)=>displatch({type:'ADD_REDUSER_2', payload:number})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ComponentCounter)","import React from 'react';\nimport './App.css';\nimport Counter from './counter'\nimport {connect} from 'react-redux';\n\n\nconst styleCount = {\n  margin:'25px auto',\n  width:'510px',\n  textAlign:'center',\n}\n\nclass App extends React.Component{\n  // constructor(){\n  //   super();\n  //   this.state = {\n  //     counter:0\n  //   }\n  // }\n  // reset(){\n  //   this.setState({\n  //     counter: 0\n  //   })\n  // }\n  // updateCount(count){\n  //   this.setState({\n  //     counter: this.state.counter + count\n  //   })\n  // }\n  funcStyleCounter(){\n    if(this.props.counter>0){\n      return {color:'#13bed8'}\n    }else if(this.props.counter<0){\n      return {color:'#e32e69'}\n    }else{return {color:'inherit'}}\n  }\n  render(){\n  return(\n    <div>\n      <div style={styleCount}>\n        <h1 style={{color:'#09995d'}}>Counter: <span style={this.funcStyleCounter()}>{this.props.counter}</span></h1>\n        <button onClick={this.props.toSub}>Відняти -1 </button>\n        <button onClick={this.props.toAdd}>Додати +1 </button>\n        <button onClick={this.props.onReset}>Обнулити</button>\n        <button onClick={this.props.toAddNumber.bind(this, 26)}>Додати 26</button>\n        <button onClick={()=>this.props.toAddNumber(-33)}>Відняти 33</button>\n      </div>\n      <Counter/>\n    </div>\n  );\n}\n}\n\nfunction mapStateToProps(state){\n  console.log(state)\n  return{\n    counter:state.reduser1.counter\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  return{\n    toAdd:()=>dispatch({type:'ADD'}),\n    toSub:()=>dispatch({type:'SUB'}),\n    onReset:()=>dispatch({type:'RES'}),\n    toAddNumber:(number)=>dispatch({type:'ADD_NUMBER', value: number})\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const staticCounter = {\r\n    counter:0,\r\n}\r\n\r\nexport default function reduser1(state=staticCounter, action){\r\n    switch(action.type){\r\n        case 'ADD':\r\n            return {\r\n                counter:state.counter + 1,\r\n            }\r\n        case 'SUB':\r\n            return {\r\n                counter:state.counter - 1,\r\n            }\r\n        case 'RES':\r\n            return {\r\n                counter: 0,\r\n            }\r\n        case 'ADD_NUMBER':\r\n            return {\r\n                counter:state.counter + action.value\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","\r\nconst staticCounter = {\r\n    counter: 200,\r\n}\r\n\r\n function reduser2(state=staticCounter, action){\r\n    switch(action.type){\r\n        case 'ADD_REDUSER_2':\r\n            return {\r\n                counter:state.counter + action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reduser2","import {combineReducers} from 'redux';\r\nimport reduser1 from './redusers/reduser_1';\r\nimport reduser2 from './redusers/reduser_2'\r\n\r\n\r\nexport default combineReducers({reduser1, reduser2})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux'\nimport rootReduser from './redux/rootReduser';\n\nconst loggerMiddleware = store => next => action => {\n    const result = next(action)\n    console.log('Middleware', store.getState())\n    return result\n}\n\nconst store = createStore(rootReduser, applyMiddleware(loggerMiddleware))\n\nconst app = (\n    <Provider store={store}>\n        <App/>\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}