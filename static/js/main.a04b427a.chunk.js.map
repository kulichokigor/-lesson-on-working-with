{"version":3,"sources":["App.js","serviceWorker.js","redux/rootReduser.js","index.js"],"names":["styleCount","margin","width","textAlign","App","this","props","counter","color","style","funcStyleCounter","onClick","toSub","toAdd","onReset","toAddNumber","bind","React","Component","connect","state","dispatch","type","number","value","Boolean","window","location","hostname","match","staticCounter","store","createStore","action","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAKMA,EAAa,CACjBC,OAAO,YACPC,MAAM,QACNC,UAAU,UAGNC,E,2LAkBF,OAAGC,KAAKC,MAAMC,QAAQ,EACb,CAACC,MAAM,WACPH,KAAKC,MAAMC,QAAQ,EACnB,CAACC,MAAM,WACH,CAACA,MAAM,a,+BAEb,IAAD,OACR,OACE,6BACE,yBAAKC,MAAOT,GACV,wBAAIS,MAAO,CAACD,MAAM,YAAlB,YAAuC,0BAAMC,MAAOJ,KAAKK,oBAAqBL,KAAKC,MAAMC,UACzF,4BAAQI,QAASN,KAAKC,MAAMM,OAA5B,kDACA,4BAAQD,QAASN,KAAKC,MAAMO,OAA5B,4CACA,4BAAQF,QAASN,KAAKC,MAAMQ,SAA5B,oDACA,4BAAQH,QAASN,KAAKC,MAAMS,YAAYC,KAAKX,KAAM,KAAnD,2CACA,4BAAQM,QAAS,kBAAI,EAAKL,MAAMS,aAAa,MAA7C,uD,GAjCUE,IAAMC,WAuDTC,mBAff,SAAyBC,GACvB,MAAM,CACJb,QAAQa,EAAMb,YAIlB,SAA4Bc,GAC1B,MAAM,CACJR,MAAM,kBAAIQ,EAAS,CAACC,KAAK,SACzBV,MAAM,kBAAIS,EAAS,CAACC,KAAK,SACzBR,QAAQ,kBAAIO,EAAS,CAACC,KAAK,SAC3BP,YAAY,SAACQ,GAAD,OAAUF,EAAS,CAACC,KAAK,aAAcE,MAAOD,QAI/CJ,CAA6Cf,GCtDxCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBAC,EAAgB,CAClBvB,QAAQ,GCQZ,IAAMwB,EAAQC,aDLC,WAAkD,IAA7BZ,EAA4B,uDAAtBU,EAAeG,EAAO,uCAC5D,OAAOA,EAAOX,MACV,IAAK,MACD,MAAO,CACHf,QAAQa,EAAMb,QAAU,GAEhC,IAAK,MACD,MAAO,CACHA,QAAQa,EAAMb,QAAU,GAEhC,IAAK,MACD,MAAO,CACHA,QAAS,GAEjB,IAAK,aACD,MAAO,CACHA,QAAQa,EAAMb,QAAU0B,EAAOT,OAEvC,QACI,OAAOJ,MCZbc,EACF,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAIRI,IAASC,OAAOF,EAAKG,SAASC,eAAe,SF8GvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a04b427a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {connect} from 'react-redux';\n\n\nconst styleCount = {\n  margin:'25px auto',\n  width:'510px',\n  textAlign:'center',\n}\n\nclass App extends React.Component{\n  // constructor(){\n  //   super();\n  //   this.state = {\n  //     counter:0\n  //   }\n  // }\n  // reset(){\n  //   this.setState({\n  //     counter: 0\n  //   })\n  // }\n  // updateCount(count){\n  //   this.setState({\n  //     counter: this.state.counter + count\n  //   })\n  // }\n  funcStyleCounter(){\n    if(this.props.counter>0){\n      return {color:'#13bed8'}\n    }else if(this.props.counter<0){\n      return {color:'#e32e69'}\n    }else{return {color:'inherit'}}\n  }\n  render(){\n  return(\n    <div>\n      <div style={styleCount}>\n        <h1 style={{color:'#09995d'}}>Counter: <span style={this.funcStyleCounter()}>{this.props.counter}</span></h1>\n        <button onClick={this.props.toSub}>Відняти -1 </button>\n        <button onClick={this.props.toAdd}>Додати +1 </button>\n        <button onClick={this.props.onReset}>Обнулити</button>\n        <button onClick={this.props.toAddNumber.bind(this, 26)}>Додати 26</button>\n        <button onClick={()=>this.props.toAddNumber(-33)}>Відняти 33</button>\n      </div>\n    </div>\n  );\n}\n}\n\nfunction mapStateToProps(state){\n  return{\n    counter:state.counter\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  return{\n    toAdd:()=>dispatch({type:'ADD'}),\n    toSub:()=>dispatch({type:'SUB'}),\n    onReset:()=>dispatch({type:'RES'}),\n    toAddNumber:(number)=>dispatch({type:'ADD_NUMBER', value: number})\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\n\r\nconst staticCounter = {\r\n    counter:0,\r\n}\r\n\r\nexport default function rootReduser(state=staticCounter, action){\r\n    switch(action.type){\r\n        case 'ADD':\r\n            return {\r\n                counter:state.counter + 1,\r\n            }\r\n        case 'SUB':\r\n            return {\r\n                counter:state.counter - 1,\r\n            }\r\n        case 'RES':\r\n            return {\r\n                counter: 0,\r\n            }\r\n        case 'ADD_NUMBER':\r\n            return {\r\n                counter:state.counter + action.value\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux'\nimport rootReduser from './redux/rootReduser';\n\n\n\nconst store = createStore(rootReduser)\n\nconst app = (\n    <Provider store={store}>\n        <App/>\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}